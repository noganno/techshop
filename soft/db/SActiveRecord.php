<?phpnamespace soft\db;use yii\base\InvalidArgumentException;use Yii;use soft\helpers\SArray;use soft\behaviors\SAuthorBehavior;use soft\traits\ModelConfigTrait;use yeesoft\multilingual\behaviors\MultilingualBehavior;use yii\behaviors\TimestampBehavior;class SActiveRecord extends \yii\db\ActiveRecord{	use ModelConfigTrait;	use MultilingualTrait;	#region Vars    public $softDelete = false;    #endregion    #region Behaviors	public function behaviors()	{//        Author behavior will automatically fill 'created by attribute' , defaults to 'user_id'		$behaviors = [            [                'class' => SAuthorBehavior::className(),                'createdByAttribute' => SArray::getValue($this->getAttributeNames(),'createdByAttribute'),            ],        ];//      Timestamp Behaviors		$createdAtAttribute = SArray::getValue($this->getAttributeNames(),'createdAtAttribute');		$updatedAtAttribute = SArray::getValue($this->getAttributeNames(),'updatedAtAttribute');		if (!$this->hasAttribute($createdAtAttribute)){		    $createdAtAttribute = false;        }		if (!$this->hasAttribute($updatedAtAttribute)){		    $updatedAtAttribute = false;        }        $behaviors[] = [            'class' => TimestampBehavior::className(),            'createdAtAttribute' => $createdAtAttribute,            'updatedAtAttribute' => $updatedAtAttribute,        ];//            multilingual behaviors		if ($this->getHasMultilingualAttributes()){		    $behaviors['multilingual'] = [                'class' => MultilingualBehavior::className(),                'languages' => $this->languages(),                'attributes' => $this->getMultilingualAttributes(),            ];        }        return array_merge(parent::behaviors(), $behaviors);	}    public function isAttribute($name)    {        if ($name){            return parent::hasAttribute($name) || $this->isMultilingualAttribute($name);        }        else return false;    }    #endregion    public function fields()    {        $fields = parent::fields();        if ($this->getHasMultilingualAttributes()){            $fields = array_merge($fields, $this->getMultilingualAttributes());        }        return $fields;    }    #region AttributeLabels	public function setAttributeLabels()    {	    return [];	}	public function attributeLabels(){	    $defaultLabels = [	    	'id' => Yii::t('app', 'ID'),            'name' => Yii::t('app', "Name"),            'title' => Yii::t('app', "Title"),            'description' => Yii::t('app', "Description"),            'content' => Yii::t('app', "Content"),            'image' => Yii::t('app', 'Image'),            'status' => Yii::t('app', 'Status'),            'user_id' => Yii::t('app', 'Author'),            'user.fullname' => Yii::t('app', 'Author'),            'slug' => Yii::t('app', 'Slug'),            'created_at' => Yii::t('app', 'Created At'),            'updated_at' => Yii::t('app', 'Updated At'),	    ]; 	    $modelLabels = $this->setAttributeLabels();	    return array_merge($defaultLabels, $modelLabels);	}    public function getAttributeLabel($attribute)    {        if ( $this->getHasMultilingualAttributes() && $this->isAttributeMultilingual($attribute)) {            return $this->getMultilingualAttributeLabel($attribute);        } else {            return parent::getAttributeLabel($attribute);        }    }    #endregion	#region Additional methods for child classes    /**	 * Berilgan $id qiymat bo'yicha modelni topish	*/	public static function findModel($id='')    {		$model = static::find()->where(['id' => $id])->one();		if ($model == null) {			throw new \yii\web\NotFoundHttpException(Yii::t('app',"Page not found!"));		}		return $model;	}    public static function findOrFail($condition)    {        $model = static::find()->where($condition)->one();        if ($model == null) {            throw new \yii\web\NotFoundHttpException(Yii::t('app',"Page not found!"));        }        return $model;    }	/**	 * Jadvaldagi Barcha yozuvlarni topish	 * */	public static function getAll($limit=0, $offset=0)	{		$query = static::find();		if ($limit > 0) $query->limit($limit);		if ($offset > 0) $query->offset($offset);		return $query->all();	}	/**	 * Jadvaldag activ modelni topish	 */	public static function findActiveOne($id='')    {       return static::find()->where($id)->andWhere(['status' => 1])->one();    }    #endregion    #region Additional methods for child class objects	public function setAttributeNames()    {	    return [];    }    public function getAttributeNames()    {	    $defaultAttributeNames = [	        'keyAttribute' => 'id',	        'createdByAttribute' => 'user_id',            'createdAtAttribute' => 'created_at',            'updatedAtAttribute' => 'updated_at',            'multilingualAttributes' => [],            'deletedAttribute' => 'deleted',        ];	    $modelAttributeNames = $this->setAttributeNames();	    return array_merge($defaultAttributeNames, $modelAttributeNames);    }    /**     * Checks whether current user is the author of this record     */    public function getIsAuthor()    {        $createdByAttribute = $this->createdByAttribute;        if ($createdByAttribute === false) {            return false;        }        return Yii::$app->user->identity->id === $this->user_id;    }    #endregion    #region Multilingual    #endregion    #region GridView configs	/**	 *   Columns for GridView	*/	public  function columns()    {		return [];	}    #endregion    #region CRUD configs	/**	 * For CRUD actions	*/	public function getIsDeletable()	{		return $this->isNewRecord ? true : $this->deleteConditions();	}	public function deleteConditions()	{		   return true;	}	public function getIsUpdatable()	{		return $this->isNewRecord ? true : $this->updateConditions();	}	public function updateConditions()	{		   return true;	}	public function getIsViewable()	{		return $this->isNewRecord ? true : $this->viewConditions();	}	public function viewConditions()	{		   return true;	}    #endregion    /**     * @return string the first error of the model after validating     * */    public function getError()    {        return reset ($this->firstErrors);    }    public function loadSave()    {        return $this->load(Yii::$app->request->post()) && $this->save();    }    public function beforeDelete()    {        if (!$this->softDelete){            return true;        }        else{            $deletedAttribute = SArray::getValue($this->getAttributeNames(), 'deletedAttribute', 'deleted');            $this->$deletedAttribute = true;            $this->save();            return false;        }    }}